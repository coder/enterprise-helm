{{- if and (eq (include "coder.hasNginxIngress" .) "true") (eq (merge .Values dict | dig "coderd" "serviceNext" false) false) (merge .Values dict | dig "ingress" "enable" true) (merge .Values dict | dig "ingress" "useDefault" true) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: custom-headers
  namespace: {{ .Release.Namespace | quote }}
data:
  # The default timeout to receive a response from the backend is
  # 15 seconds. This is a little low for applications like webpack
  # which may need extra time to compile resources upon receiving
  # a request.
  # See https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-upstream-rq-timeout-ms
  X-Envoy-Upstream-Rq-Timeout-Ms: "60000"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
data:
  proxy-set-headers: "{{ .Release.Namespace }}/custom-headers"
  enable-underscores-in-headers: "true"
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole-{{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - "extensions"
      - "storage.k8s.io"
    resources:
      - storageclasses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - ingress-controller-leader-{{ .Release.Namespace }}
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: {{ .Release.Namespace | quote }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  # The cluster role binding needs to be namespaced to avoid
  # reassigning the subject each time someone makes a push.
  name: nginx-ingress-clusterrole-nisa-binding-{{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole-{{ .Release.Namespace }}
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: {{ .Release.Namespace | quote }}
---
apiVersion: apps/v1
kind: {{ merge .Values dict | dig "ingress" "deployment" "kind" "Deployment" | quote }}
metadata:
  name: nginx-ingress-controller
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  annotations:
  {{- range $key, $value := fromYaml (include "movedValue" (dict "Values" .Values "Key" "services.annotations")) }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
{{- if eq (merge .Values dict | dig "ingress" "deployment" "kind" "Deployment") "Deployment" }}
  replicas: 1
{{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
      {{- range $key, $value := fromYaml (include "movedValue" (dict "Values" .Values "Key" "services.annotations")) }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
    spec:
      # wait up to five minutes for the drain of connections
      terminationGracePeriodSeconds: 300
      serviceAccountName: nginx-ingress-serviceaccount
{{- include "coder.services.nodeSelector" . | indent 6 }}
{{- include "coder.serviceTolerations" . | indent 6 }}
      containers:
        - name: nginx-ingress-controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.33.0
          args:
            - /nginx-ingress-controller
              # The ingress-class points the nginx controller to our
              # "web-ingress" ingress resource.
            - --ingress-class={{ .Release.Namespace }}
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/ingress-nginx
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 101
            runAsUser: 101
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
            - name: https
              containerPort: 443
          livenessProbe:
            failureThreshold: 3
            exec:
              command:
                - curl
                - s
                - http://localhost:10254/healthz
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            exec:
              command:
                - curl
                - s
                - http://localhost:10254/healthz
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown

---
kind: Service
apiVersion: v1
metadata:
  name: ingress-nginx
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  annotations:
  {{- range $key, $value := fromYaml (merge .Values dict | dig "ingress" "service" "annotations" "Default" "{}") }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
  externalTrafficPolicy: {{ include "movedValue" (dict "Values" .Values "Key" "coderd.serviceSpec.externalTrafficPolicy") | quote }}
  type: {{ merge .Values dict | dig "coderd" "serviceSpec" "type" "LoadBalancer" }}
  loadBalancerIP: {{ include "movedValue" (dict "Values" .Values "Key" "coderd.serviceSpec.loadBalancerIP") | quote }}
  loadBalancerSourceRanges:
{{ include "movedValue" (dict "Values" .Values "Key" "coderd.serviceSpec.loadBalancerSourceRanges") | indent 4 }}
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: https
      port: 443
      targetPort: https
{{- if (merge .Values dict | dig "ssh" "enable" true) }}
    - name: ssh
      port: 22
      targetPort: 22
      protocol: TCP
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  namespace: {{ .Release.Namespace | quote }}
  annotations:
  {{- if ne (merge .Values dict | dig "ingress" "useDefault" true) false }}
    # This class definition connects the nginx ingress controller
    # to the web-ingress.
    kubernetes.io/ingress.class: {{ .Release.Namespace | quote }}
    # A body size of 0 prevents 413 status codes when trying to
    # push an image.
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  {{- end }}
  {{- range $key, $value := merge .Values dict | dig "ingress" "annotations" dict }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
{{- include "coder.ingress.tls" . }}
  defaultBackend:
    service:
      name: {{ include "coder.serviceName" . }}
      port:
        number: 8080
  {{- if .Values.coderd.satellite.enable }}
  {{- if (merge .Values dict | dig "ingress" "useDefault" true) }}
  rules:
  - host: {{ merge .Values dict | dig "ingress" "host" "" | quote }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ include "coder.serviceName" . }}
            port:
              number: 8080
  {{- end }}
  {{- else }}
  rules:
  - host: {{ merge .Values dict | dig "ingress" "host" "" | quote }}
    http:
      paths:
    {{- if (merge .Values dict | dig "ingress" "useDefault" true) }}
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: {{ include "coder.serviceName" . }}
            port:
              number: 8080
      - path: /auth
        pathType: Prefix
        backend:
          service:
            name: {{ include "coder.serviceName" . }}
            port:
              number: 8080
      - path: /
        pathType: Prefix
        backend:
          {{- if .Values.dashboard }}
          service:
            name: dashboard
            port:
              number: 3000
          {{- else }}
          service:
            name: {{ include "coder.serviceName" . }}
            port:
              number: 8080
          {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
---
{{- if and (merge .Values dict | dig "coderd" "serviceNext" true) (merge .Values dict | dig "ingress" "enable" true) }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: coderd-ingress
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  {{- range $key, $value := merge .Values dict | dig "ingress" "annotations" dict }}
    {{ $key }}: {{ $value | quote }}
  {{- end }}
spec:
{{- include "coder.ingress.tls" . }}
  rules:
  - host: {{ merge .Values dict | dig "ingress" "host" "" | quote }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ include "coder.serviceName" . }}
            port:
              name: tcp-{{ include "coder.serviceName" . }}
          {{ $devURLHost := merge .Values dict | dig "coderd" "devurlsHost" "" }}
          # Regex docs on '*-suffix.example.com'
          #   - '\\*'     Starts with '*'
          #   - '[^.]*'   Suffix is 0 or more characters, '-suffix'
          #   - '('       Start domain capture grp
          #   -   '\\.'     The domain should be separated with a '.' from the subdomain
          #   -   '.*'      Rest of the domain.
          #   - ')'       $1 is the ''.example.com'
  - host: {{ regexReplaceAll "\\*[^.]*(\\..*)" $devURLHost "*${1}" | quote }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ include "coder.serviceName" . }}
            port:
              name: tcp-{{ include "coder.serviceName" . }}
{{- end }}
