# coderd -- Primary service responsible for all things Coder!
coderd:
  # coderd.image -- Injected by Coder during release.
  image: ""
  # coderd.replicas -- The number of Kubernetes Pod replicas.
  replicas: 1

  # coderd.serviceSpec -- Specification to inject for the coderd service. See:
  # https://kubernetes.io/docs/concepts/services-networking/service/
  serviceSpec:
    # coderd.serviceSpec.type -- Set the type of Service. See:
    # https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
    type: LoadBalancer
    # coderd.serviceSpec.externalTrafficPolicy -- Set the traffic policy for the service. See:
    # https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
    externalTrafficPolicy: Local
    # coderd.serviceSpec.loadBalancerIP -- Set the external IP address of the
    # Ingress service.
    loadBalancerIP: ""
    # coderd.serviceSpec.loadBalancerSourceRanges -- Traffic through the LoadBalancer
    # will be restricted to the specified client IPs. This field will be ignored if
    # the cloud provider does not support this feature.
    loadBalancerSourceRanges: []

  # coderd.serviceNodePorts -- Allows manually setting static node ports for the coderd service.
  # This is only helpful if static ports are required, and usually should be left alone.
  # By default these are dynamically chosen.
  serviceNodePorts:
    # coderd.serviceNodePorts.http -- Sets a static 'coderd' service non-TLS nodePort.
    # This should usually be omitted.
    http: null
    # coderd.serviceNodePorts.https -- Sets a static 'coderd' service TLS nodePort
    # This should usually be omitted.
    https: null

  # coderd.serviceAnnotations -- Extra annotations to apply to the coderd service.
  serviceAnnotations: {}

  # coderd.trustProxyIP -- Whether Coder should trust X-Real-IP and/or
  # X-Forwarded-For headers from your reverse proxy. This should only be turned
  # on if you're using a reverse proxy that sets both of these headers. This is
  # always enabled if the Nginx ingress is deployed.
  trustProxyIP: false

  # coderd.devurlsHost -- Wildcard hostname to allow matching against custom-created
  # dev URLs. Leaving as an empty string results in DevURLs being disabled.
  devurlsHost: ""

  # coderd.tls -- TLS configuration for coderd.
  # These options will override dashboard configuration.
  tls:
    # coderd.tls.hostSecretName -- The secret to use for TLS.
    hostSecretName: ""
    # coderd.tls.devurlsHostSecretName -- The secret to use for DevURL TLS.
    devurlsHostSecretName: ""

  # coderd.satellite -- Deploy a satellite to geodistribute access to
  # workspaces for lower latency.
  satellite:
    # coderd.satellite.enable -- Run coderd as a satellite pointing to a primary
    # deployment. Satellite enable low-latency access to workspaces all over the
    # world. Read more:
    # TODO: Link to docs.
    enable: false
    # coderd.satellite.accessURL -- URL of the satellite that clients will
    # connect to.
    # e.g. https://sydney.coder.myorg.com
    accessURL: ""
    # coderd.satellite.primaryURL -- URL of the primary Coder deployment. Must
    # be accessible from the satellite and clients.
    # eg. https://coder.myorg.com
    primaryURL: ""

  # coderd.podSecurityContext -- Fields related to the pod's security context
  # (as opposed to the container). Some fields are also present in the
  # container security context, which will take precedence over these values.
  podSecurityContext:
    # coderd.podSecurityContext.runAsNonRoot -- Requires that containers in
    # the pod run as an unprivileged user. If setting runAsUser to 0 (root),
    # this will need to be set to false.
    runAsNonRoot: true
    # coderd.podSecurityContext.runAsUser -- Sets the user id of the pod.
    # For security reasons, we recommend using a non-root user.
    runAsUser: 1000
    # coderd.podSecurityContext.runAsGroup -- Sets the group id of the pod.
    # For security reasons, we recommend using a non-root group.
    runAsGroup: 1000
    # coderd.podSecurityContext.seccompProfile -- Sets the seccomp profile
    # for the pod. If set, the container security context setting will take
    # precedence over this value.
    seccompProfile:
      type: RuntimeDefault

  # coderd.securityContext -- Fields related to the container's security
  # context (as opposed to the pod). Some fields are also present in the pod
  # security context, in which case these values will take precedence.
  securityContext:
    # coderd.securityContext.runAsNonRoot -- Requires that the coderd and
    # migrations containers run as an unprivileged user. If setting
    # runAsUser to 0 (root), this will need to be set to false.
    runAsNonRoot: true
    # coderd.securityContext.runAsUser -- Sets the user id of the pod.
    # For security reasons, we recommend using a non-root user.
    runAsUser: 1000
    # coderd.securityContext.runAsGroup -- Sets the group id of the pod.
    # For security reasons, we recommend using a non-root group.
    runAsGroup: 1000
    # coderd.securityContext.readOnlyRootFilesystem -- Mounts the container's
    # root filesystem as read-only. It is recommended to leave this setting
    # enabled in production. This will override the same setting in the pod
    readOnlyRootFilesystem: true
    # coderd.securityContext.seccompProfile -- Sets the seccomp profile for
    # the migration and runtime containers.
    seccompProfile:
      type: RuntimeDefault
    # coderd.securityContext.allowPrivilegeEscalation -- Controls whether
    # the container can gain additional privileges, such as escalating to
    # root. It is recommended to leave this setting disabled in production.
    allowPrivilegeEscalation: false

  # coderd.resources -- Kubernetes resource specification for coderd pods.
  # To unset a value, set it to "". To unset all values, set resources to nil.
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "250m"
      memory: "512Mi"

  # coderd.builtinProviderServiceAccount -- Customize the built-in Kubernetes
  # provider service account.
  builtinProviderServiceAccount:
    # coderd.builtinProviderServiceAccount.annotations -- A KV mapping of annotations. See:
    # https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    annotations: {}
    # coderd.builtinProviderServiceAccount.labels -- Add labels to the service account
    # used for the built-in provider.
    labels: {}

  # Temporary options for opting in to the new OIDC refresh feature, which
  # allows Coder-issued API keys to inherit session timing limits and uses
  # refresh tokens to ensure continued access. These are purposefully not
  # documented in the README since they will be moved into the OIDC config on
  # the dashboard.
  oidc:
    # enableRefresh enables the new OIDC refresh feature.
    enableRefresh: false
    # redirectOptions controls which query parameters are set when redirecting
    # the user to the OIDC provider.
    redirectOptions: {}

  # Options for customizing the built-in super admin account for managing a
  # Coder installation.
  superAdmin:
    # Options for configuring the secret used to specify the password for the
    # built-in super admin account.
    passwordSecret:
      # coderd.superAdmin.passwordSecret.name -- Name of a secret that should
      # be used to determine the password for the super admin account. The
      # password should be contained in the field `password`, or the manually
      # specified one.
      name: ""
      # coderd.superAdmin.passwordSecret.key -- The key of the secret that
      # contains the super admin password.
      key: "password"

  # coderd.extraLabels -- Allows specifying additional labels to pods in the
  # `coderd` deployment (.spec.template.metadata.labels).
  extraLabels: {}
  # coderd.affinity -- Allows specifying an affinity rule for the `coderd`
  # deployment. The default rule prefers to schedule coderd pods on different
  # nodes, which is only applicable if coderd.replicas is greater than 1.
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - "coderd"
            topologyKey: kubernetes.io/hostname
          weight: 1
# ingress -- Configure an Ingress to route traffic to Coder services.
ingress:
  # ingress.enable -- A boolean controlling whether to create an Ingress.
  enable: false
  # ingress.host -- The hostname to proxy to the Coder installation.
  # The cluster Ingress Controller typically uses server name indication
  # or the HTTP Host header to route traffic.
  host: ""
  # ingress.annotations -- Additional annotations to add to the Ingress
  # object. The behavior is typically dependent on the Ingress Controller
  # implementation, and useful for managing features like TLS termination.
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"

  # ingress.tls -- Configures TLS settings for the Ingress.
  tls:
    # ingress.tls.enable -- Determines whether the Ingress handles TLS.
    enable: false

# envbox -- Required for running Docker inside containers. See requirements:
# https://coder.com/docs/coder/latest/admin/workspace-management/cvms
envbox:
  # envbox.image -- Injected by Coder during release.
  image: ""

# Contains fields related to the Postgres backend. If providing your own
# instance, a minimum version of Postgres 11 is required with the contrib
# package installed.
postgres:
  # postgres.host -- Host of the external PostgreSQL instance.
  host: ""
  # postgres.port -- Port of the external PostgreSQL instance.
  port: ""
  # postgres.user -- User of the external PostgreSQL instance.
  user: ""
  # postgres.database -- Name of the database that Coder will use.
  # You must create this database first.
  database: ""
  # postgres.passwordSecret -- Name of an existing secret in the
  # current namespace with the password of the PostgreSQL instance.
  # The password must be contained in the secret field `password`.
  # This should be set to an empty string if the database does not
  # require a password to connect.
  passwordSecret: ""
  # postgres.sslMode -- Provides variable levels of protection for
  # the PostgreSQL connection. For acceptable values, see:
  #  https://www.postgresql.org/docs/11/libpq-ssl.html
  sslMode: "require"
  # postgres.ssl -- Options for configuring the SSL cert, key, and root cert
  # when connecting to Postgres.
  ssl:
    # postgres.ssl.certSecret -- Secret containing a PEM encoded cert file.
    certSecret:
      # postgres.ssl.certSecret.name -- Name of the secret.
      name: ""
      # postgres.ssl.certSecret.key -- Key pointing to a certificate in the secret.
      key: ""
    # postgres.ssl.keySecret -- Secret containing a PEM encoded key file.
    keySecret:
      # postgres.ssl.keytSecret.name -- Name of the secret.
      name: ""
      # postgres.ssl.keySecret.key -- Key pointing to a certificate in the secret.
      key: ""
    # postgres.ssl.rootCertSecret -- Secret containing a PEM encoded root cert file.
    rootCertSecret:
      # postgres.ssl.rootCertSecret.name -- Name of the secret.
      name: ""
      # postgres.ssl.rootCertSecret.key -- Key pointing to a certificate in the secret.
      key: ""

  # postgres.default -- Configure a built-in PostgreSQL deployment.
  default:
    # postgres.default.enable -- Deploys a PostgreSQL instance. We recommend
    # using an external PostgreSQL instance in production.
    # If true, all other values are ignored.
    enable: true
    # postgres.default.image -- Injected by Coder during release.
    image: ""
    # postgres.default.storageClassName -- Set the storageClass to store
    # the database.
    storageClassName: ""
    # postgres.default.resources -- Kubernetes resource specification for the PostgreSQL pod.
    # To unset a value, set it to "". To unset all values, set resources to nil.
    resources:
      requests:
        cpu: "250m"
        memory: "1Gi"
        # postgres.default.resources.requests.storage -- Specifies the size of the volume claim
        # for persisting the database.
        storage: "10Gi"
      limits:
        cpu: "250m"
        memory: "1Gi"

# services -- Kubernetes Service configuration that applies to Coder services.
services:
  # services.annotations -- A KV mapping of annotations. See:
  # https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  annotations: {}
  # services.clusterDomainSuffix -- Custom domain suffix for DNS resolution in your cluster. See:
  # https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/
  clusterDomainSuffix: ".svc.cluster.local"
  # services.tolerations -- Each element is a toleration object. See:
  # https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  tolerations: []
  # services.nodeSelector -- See:
  # https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  nodeSelector:
    kubernetes.io/os: linux
    kubernetes.io/arch: amd64
  # services.type -- See the following for configurable types:
  # https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: "ClusterIP"

# logging -- Configures the logging format and output of Coder.
logging:
  # logging.human -- Location to send logs that are formatted for readability.
  # Set to an empty string to disable.
  human: /dev/stderr
  # logging.stackdriver -- Location to send logs that are formatted for Google
  # Stackdriver. Set to an empty string to disable.
  stackdriver: ""
  # logging.json -- Location to send logs that are formatted as JSON.
  # Set to an empty string to disable.
  json: ""

  # logging.splunk -- Coder can send logs directly to Splunk
  # in addition to file-based output.
  splunk:
    # logging.splunk.url -- Splunk HEC collector endpoint.
    url: ""
    # logging.splunk.token -- Splunk HEC collector token.
    token: ""
    # logging.splunk_channel -- Optional. Specify the channel
    # to associate messages with.
    channel: ""

# metrics -- Configure various metrics to gain observability into Coder.
metrics:
  # metrics.amplitudeKey -- Enables telemetry pushing to Amplitude. Amplitude records how users
  # interact with Coder, which is used to improve the product. No events store any personal
  # information. Amplitude can be found here: https://amplitude.com/
  # Keep empty to disable.
  amplitudeKey: ""

# certs -- Certificate that will be mounted inside Coder services.
certs:
  secret:
    # certs.secret.name -- Name of the secret.
    name: ""
    # certs.secret.key -- Key pointing to a certificate in the secret.
    key: ""
