---
# Source: coder/templates/networkpolicies.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-deny-all
  namespace: coder-jawnsy-m
spec:
  # Deny all ingress traffic for workspace pods. The coder agent initiates
  # all network traffic (TURN-over-HTTPS or STUN)
  podSelector:
    matchLabels:
      com.coder.resource: "true"
  policyTypes:
    - Ingress
  ingress: []
---
# Source: coder/templates/networkpolicies.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coderd
  namespace: coder-jawnsy-m
  labels:
    app.kubernetes.io/name: coder
    helm.sh/chart: coder-1.25.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: RELEASE-NAME
    app.kubernetes.io/version: 1.25.0
    app.kubernetes.io/component: coderd
spec:
  podSelector:
    matchLabels:
      com.coder.resource: "true"
  policyTypes:
    - Ingress
  # Deny all ingress traffic, except on our service ports
  ingress:
    - from: []
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 8443
---
# Source: coder/templates/coderd.yaml
apiVersion: v1
kind: Secret
metadata:
  name: coder-replica-private-key
  namespace: "coder-jawnsy-m"
type: Opaque
# Adapted from https://stackoverflow.com/a/64325744
data:
  privateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSURKbGtPRERGdnJvOVozSEtNZFZySW5MV0xwV2NJQUlQTkpaM1J3ckFLZm9vQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFcUJXOENXOURqOUtQeDczQzM2QUtlZys0L0g1RUtINlp3S3lpSnNLOURrZElVSzE2bndBZwpUa3RhMWh2Vi9iZ0N3YUQya1RPT0k4Q09SY2JqK2llalNnPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQo=
---
# Source: coder/templates/coderd.yaml
apiVersion: v1
kind: Service
metadata:
  name: coderd
  namespace: "coder-jawnsy-m"
  annotations: 
    {}
spec:
  externalTrafficPolicy: Local
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  type: LoadBalancer
  selector:
    coder.deployment: coderd
  ports:
    - name: tcp-coderd
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: tcp-coderd-https
      port: 443
      targetPort: 8443
      protocol: TCP
---
# Source: coder/templates/coderd.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: coderd
    app.kubernetes.io/part-of: coder
    app: coderd
    coder.deployment: coderd
  name: coderd
  namespace: "coder-jawnsy-m"
  annotations: 
    {}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "25%"
  selector:
    matchLabels:
      coder.deployment: coderd
  template:
    metadata:
      labels:
        app.kubernetes.io/name: coderd
        app.kubernetes.io/part-of: coder
        app: coderd
        coder.deployment: coderd
      annotations: 
        {}
    spec:
      securityContext: 
        runAsGroup: 1000
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      restartPolicy: Always
      # terminationGracePeriodSeconds should be set to the upper bound for container rebuilds and creates.
      # 5 minutes
      terminationGracePeriodSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - coderd
              topologyKey: kubernetes.io/hostname
            weight: 1      
      nodeSelector: 
        kubernetes.io/arch: amd64
        kubernetes.io/os: linux      
      containers:
        - name: coderd
          image: "docker.io/coderenvs/coder-service:1.25.0"
          imagePullPolicy: Always
          ports:
            - name: tcp-coderd
              containerPort: 8080
          securityContext: 
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          # coderd is a daemon service, no need to allocate a tty for it.
          tty: false
          env:
            - name: SKIP_MIGRATIONS
              value: "true"
            - name: ASSETS_URL
            - name: HUMAN_LOG
              value: "/dev/stderr"
            - name: JSON_LOG
              value: ""
            - name: STACKDRIVER_LOG
              value: ""
            - name: AMPLITUDE_API_KEY
              value: ""
              # ENVBOX_IMAGE describes the image used to provide
              # additional features to users for running applications
              # such as dockerd and kubernetes.
            - name: ENVBOX_IMAGE
              value: "docker.io/coderenvs/envbox:1.25.0"
            - name: CLUSTER_ADDRESS
              value: "https://kubernetes.default.svc.cluster.local:443"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: DEVURL_HOST
              value: ""
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: VERBOSE
              value: "true"
            - name: TRUST_PROXY_IP
              value: "false"
            - name: CODER_SATELLITE_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: coder-replica-private-key
                  key: privateKey
            - name: CODER_PRIMARY_ACCESS_URL
              value: ""
            - name: CODER_SATELLITE_ACCESS_URL
              value: ""
            - name: OIDC_REDIRECT_OPTIONS
              value: "{}"
            - name: http_proxy
              value: ""
            - name: https_proxy
              value: ""
            - name: no_proxy
              value: "cluster.local"                        
            - name: DB_HOST
              value: timescale.coder-jawnsy-m.svc.cluster.local
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              value: coder
            - name: DB_NAME
              value: coder
            - name: DB_SSL_MODE
              value: disable
          command:
            - coderd
            - replica
          readinessProbe:
            httpGet:
              path: /cem-healthz
              port: 8080
            initialDelaySeconds: 10
            failureThreshold: 7
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /cem-healthz
              port: 8080
            initialDelaySeconds: 10
            failureThreshold: 7
            periodSeconds: 10          
          resources:
            requests:
              cpu: "250m"
              memory: "512Mi"
            limits:
              cpu: "250m"
              memory: "512Mi"          
          volumeMounts:
            - name: tmp-pgcerts
              mountPath: /tmp/pgcerts      
      volumes:
        - name: tmp-pgcerts
          emptyDir: {}
